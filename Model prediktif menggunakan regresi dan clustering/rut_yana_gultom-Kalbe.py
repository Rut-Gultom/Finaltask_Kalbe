# -*- coding: utf-8 -*-
"""Rut Yana Gultom_Kalbe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b3cwioTV7N80uJBUXrGllycZ0gWPAPKO
"""

import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.cluster import KMeans

file1_path = "customer.csv"
file2_path = "product.csv"
file3_path = "store.csv"
file4_path = "transaction.csv"

df1 = pd.read_csv(file1_path)
df2 = pd.read_csv(file2_path)
df3 = pd.read_csv(file3_path)
df4 = pd.read_csv(file4_path)

# Melihat tampilan data
df1.head()
df2.head()
df3.head()
df4.head()

# Tampilkan informasi tentang setiap DataFrame
df1.info()
df2.info()
df3.info()
df4.info()

"""## Identifikasi masalah dalam data:"""

# Contoh mengidentifikasi nilai-nilai yang hilang pada setiap DataFrame
print(df1.isnull().sum())
print(df2.isnull().sum())
print(df3.isnull().sum())
print(df4.isnull().sum())

# Contoh mengidentifikasi nilai-nilai duplikat pada setiap DataFrame
print(df1.duplicated().sum())
print(df2.duplicated().sum())
print(df3.duplicated().sum())
print(df4.duplicated().sum())

# Mengatasi nilai yang hilang
df1.fillna(df1.mean(numeric_only=True), inplace=True)
df2.fillna(df2.median(numeric_only=True), inplace=True)
df3.fillna(df3.mean(numeric_only=True), inplace=True)
df4.fillna(df4.median(numeric_only=True), inplace=True)

# Menghapus nilai duplikat:

df1.drop_duplicates(inplace=True)
df2.drop_duplicates(inplace=True)
df3.drop_duplicates(inplace=True)
df4.drop_duplicates(inplace=True)

"""## Merge Data"""

# 1. Gabungkan tabel customer dan transaction berdasarkan kolom "CustomerID"
merged_customer_transaction = pd.merge(df1, df4, on="CustomerID", how="inner")

# 2. Gabungkan hasil langkah 1 dengan tabel product berdasarkan kolom "ProductID"
merged_customer_transaction_product = pd.merge(merged_customer_transaction, df2, on="ProductID", how="inner")

# 3. Gabungkan hasil langkah 2 dengan tabel store berdasarkan kolom "StoreID"
final_merged_data = pd.merge(merged_customer_transaction_product, df3, on="StoreID", how="inner")

final_merged_data.to_csv("final_merged_data.csv", index=False)

"""## Machine Learning Regression (Time Series)"""

# Konversi kolom "Date" menjadi tipe data datetime
final_merged_data["Date"] = pd.to_datetime(final_merged_data["Date"], format="%d/%m/%Y")

# Kelompokkan data berdasarkan kolom "Date" dan lakukan agregasi dengan menjumlahkan nilai pada kolom "Qty"
regression_data = final_merged_data.groupby("Date")["Qty"].sum().reset_index()

# Tampilkan data baru yang telah diagregasi untuk regresi
print(regression_data)

"""## AIMA"""

# Ubah kolom "Date" menjadi indeks
regression_data.set_index("Date", inplace=True)

# Pastikan data diurutkan berdasarkan tanggal
regression_data.sort_index(inplace=True)

# Pilih model ARIMA:
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))
sm.graphics.tsa.plot_acf(regression_data["Qty"], lags=50, ax=ax1)
sm.graphics.tsa.plot_pacf(regression_data["Qty"], lags=50, ax=ax2)
plt.show()

# Fit model ARIMA:
p, d, q = 2, 1, 2
model = ARIMA(regression_data["Qty"], order=(p, d, q))
results = model.fit()

# Tampilkan ringkasan hasil model ARIMA
print(results.summary())

# Melakukan prediksi:
# Misalnya, untuk melakukan prediksi 10 langkah ke depan
n_steps = 10
forecast = results.forecast(steps=n_steps)

# Tampilkan hasil prediksi
print(forecast)

"""## Machine Learning Clustering"""

# Kelompokkan data berdasarkan "CustomerID" dan lakukan agregasi
clustering_data = final_merged_data.groupby("CustomerID").agg({
    "TransactionID": "count",
    "Qty": "sum",
    "TotalAmount": "sum"
}).reset_index()

# Ubah nama kolom hasil agregasi agar lebih jelas
clustering_data.columns = ["CustomerID", "TransactionCount", "TotalQty", "TotalAmount"]

# Tampilkan data baru yang telah diagregasi untuk clustering
print(clustering_data)

"""#### Menggunakan Metode Clustering KMeans:"""

# Pilih kolom untuk clustering
X = clustering_data[["TransactionCount", "TotalQty", "TotalAmount"]]

# Inisialisasi model KMeans dengan jumlah cluster yang diinginkan
num_clusters = 3
kmeans_model = KMeans(n_clusters=num_clusters, random_state=42)

# Melatih model dengan data
kmeans_model.fit(X)

# Menambahkan kolom "Cluster" pada DataFrame clustering_data untuk menyimpan hasil clustering
clustering_data["Cluster"] = kmeans_model.labels_

# Tampilkan hasil clustering
print(clustering_data)

"""#### Visualisasi Hasil Clustering:"""

plt.scatter(clustering_data["TotalQty"], clustering_data["TotalAmount"], c=clustering_data["Cluster"], cmap='rainbow')
plt.xlabel("Total Qty")
plt.ylabel("Total Amount")
plt.title("Clustering Result (KMeans)")
plt.show()



